import remiseras.*

describe "Test de viajes de 10 Km" {

	const kmARecorrer = 10

	test "Viajes con roxana" {
		assert.equals(180, roxana.precioViaje(ludmila, kmARecorrer))
		assert.equals(300, roxana.precioViaje(ana, kmARecorrer))
		assert.equals(220, roxana.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Gabriela" {
		assert.equals(216, gabriela.precioViaje(ludmila, kmARecorrer))
		assert.equals(360, gabriela.precioViaje(ana, kmARecorrer))
		assert.equals(264, gabriela.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Mariela" {
		assert.equals(180, mariela.precioViaje(ludmila, kmARecorrer))
		assert.equals(300, mariela.precioViaje(ana, kmARecorrer))
		assert.equals(220, mariela.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Juana" {
		assert.equals(200, juana.precioViaje(ludmila, kmARecorrer))
		assert.equals(200, juana.precioViaje(ana, kmARecorrer))
		assert.equals(200, juana.precioViaje(teresa, kmARecorrer))
	}

}

describe "Test de viajes de 2 Km" {

	const kmARecorrer = 2

	test "Viajes con roxana" {
		assert.equals(36, roxana.precioViaje(ludmila, kmARecorrer))
		assert.equals(60, roxana.precioViaje(ana, kmARecorrer))
		assert.equals(44, roxana.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Gabriela" {
		assert.equals(43.2, gabriela.precioViaje(ludmila, kmARecorrer))
		assert.equals(72, gabriela.precioViaje(ana, kmARecorrer))
		assert.equals(52.8, gabriela.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Mariela" {
		assert.equals(50, mariela.precioViaje(ludmila, kmARecorrer))
		assert.equals(60, mariela.precioViaje(ana, kmARecorrer))
		assert.equals(50, mariela.precioViaje(teresa, kmARecorrer))
	}

	test "Viajes con Juana" {
		assert.equals(100, juana.precioViaje(ludmila, kmARecorrer))
		assert.equals(100, juana.precioViaje(ana, kmARecorrer))
		assert.equals(100, juana.precioViaje(teresa, kmARecorrer))
	}

}

describe "Lucia y Melina" {

	method luciaRemplaza(compa) {
		lucia.remplazarA(compa)
		assert.equals(compa, lucia.esRemplazoDe())
	}

	method melinaPara(clienta) {
		melina.trabajaPara(clienta)
		assert.equals(clienta, melina.cliente())
	}

	test "Viaje de 10 km (Lucia remplaza a Mariela)" {
		self.luciaRemplaza(mariela)
		self.melinaPara(ludmila)
		assert.equals(150, lucia.precioViaje(melina, 10))
	}

	test "Viaje de 1 km (Lucia remplaza a Mariela)" {
		self.luciaRemplaza(mariela)
		self.melinaPara(ludmila)
		assert.equals(50, lucia.precioViaje(melina, 1))
	}

	test "Viaje de 10 km (Lucia remplaza a Gabriela)" {
		self.luciaRemplaza(gabriela)
		self.melinaPara(ludmila)
		assert.equals(180, lucia.precioViaje(melina, 10))
	}

	test "Viaje de 1 km (Lucia remplaza a Gabriela)" {
		self.luciaRemplaza(gabriela)
		self.melinaPara(ludmila)
		assert.equals(18, lucia.precioViaje(melina, 1))
	}

}

describe "Oficina" {

	const primerRemisera = roxana
	const segundaRemisera = juana
	
	method initialize() {
		oficina.asignarRemiseras(primerRemisera, segundaRemisera)
	}
	
	test "Viaje de 10 km para Ana Maria" {
		assert.equals(segundaRemisera, oficina.remiseraElegidaParaViaje(ana, 10))
	}

	test "Viaje de 10 km para Teresa" {
		assert.equals(primerRemisera, oficina.remiseraElegidaParaViaje(teresa, 10))
	}

	test "Viaje de 4 km para Teresa" {
		assert.equals(primerRemisera, oficina.remiseraElegidaParaViaje(teresa, 4))
	}

	test "Intercambio" {
		oficina.intercambiarRemiseras()
		assert.equals(primerRemisera, oficina.segundaRemiseraAsignada())
		assert.equals(segundaRemisera, oficina.primerRemiseraAsignada())
	}

}

